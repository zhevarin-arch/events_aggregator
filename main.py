#!/usr/bin/env python3
"""
Event Aggregator - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø)
–° AI —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π, –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏, –ø–æ–ª–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
"""

import sys
import os
import requests
from datetime import datetime, timedelta
import yaml
import logging
from dotenv import load_dotenv

load_dotenv()
logging.basicConfig(level=logging.INFO, format='%(message)s')
logger = logging.getLogger(__name__)
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from scraper.multi_source_scraper import MultiSourceEventScraper

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
try:
    from ai.event_analyzer import EventAnalyzer
    ai_available = True
except:
    ai_available = False

def main():
    print("\n" + "=" * 70)
    print("EVENT AGGREGATOR - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø –° AI".center(70))
    print("=" * 70 + "\n")
    
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    group_id = os.getenv('TELEGRAM_GROUP_ID')
    ai_key = os.getenv('OPENROUTER_API_KEY')
    
    if not token or not group_id:
        print("‚ùå .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    with open('config.yaml', 'r', encoding='utf-8') as f:
        config = yaml.safe_load(f)
    
    print("üì¶ –ü–û–î–ë–û–†–ö–ê (Enter=1):")
    for i, key in enumerate(config['collections'].keys(), 1):
        print(f"   {i}. {config['collections'][key]['name']}")
    col_idx = int(input("\n> ").strip() or "1") - 1
    collection = list(config['collections'].values())[col_idx]
    
    print("\nüìç –¢–ï–†–†–ò–¢–û–†–ò–Ø (Enter=1):")
    for i, key in enumerate(config['territories'].keys(), 1):
        print(f"   {i}. {config['territories'][key]['name']}")
    terr_idx = int(input("\n> ").strip() or "1") - 1
    terr_key = list(config['territories'].keys())[terr_idx]
    territory = config['territories'][terr_key]
    
    print("\n‚è∞ –ü–ï–†–ò–û–î (Enter=3):")
    print("   1. –°–µ–≥–æ–¥–Ω—è")
    print("   2. –ó–∞–≤—Ç—Ä–∞")
    print("   3. –ù–∞ –Ω–µ–¥–µ–ª—é")
    print("   4. –ù–∞ –º–µ—Å—è—Ü")
    period_choice = int(input("\n> ").strip() or "3")
    
    time_ranges = {1: 'today', 2: 'tomorrow', 3: 'week', 4: 'month'}
    time_range = time_ranges.get(period_choice, 'week')
    
    scraper = MultiSourceEventScraper()
    print(f"\nüîÑ –°–±–æ—Ä: {territory['name']} ({time_range})...")
    print("   –ò—Å—Ç–æ—á–Ω–∏–∫–∏: KudaGo, –Ø–Ω–¥–µ–∫—Å.–ê—Ñ–∏—à–∞, –°–∞–π—Ç—ã –ø–ª–æ—â–∞–¥–æ–∫")
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä
    events = scraper.scrape_all(territory['name'], time_range)
    
    if not events:
        print("‚ùå –°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    print(f"‚úì –ù–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π")
    
    # AI –§–ò–õ–¨–¢–†–ê–¶–ò–Ø
    if ai_available and ai_key:
        print("ü§ñ AI —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π...")
        analyzer = EventAnalyzer(ai_key)
        
        filtered = []
        for i, event in enumerate(events):
            analysis = analyzer.analyze_quality(event)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–ª–æ—Ö–∏–µ —Å–æ–±—ã—Ç–∏—è
            if analysis.get('has_bad_content'):
                continue
            
            if analysis.get('quality', 0) < 5:
                continue
            
            # –î–æ–±–∞–≤–ª—è–µ–º AI –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ–±—ã—Ç–∏–µ
            event['quality'] = analysis.get('quality', 5)
            event['ai_summary'] = analysis.get('summary', '')
            event['is_relevant'] = analysis.get('is_relevant', True)
            
            filtered.append(event)
            print(f"   ‚úì {i+1}. {event.get('title', '')[:40]}... [–∫–∞—á–µ—Å—Ç–≤–æ: {analysis.get('quality', 5)}/10]")
        
        events = filtered
        print(f"‚úì –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(events)} —Å–æ–±—ã—Ç–∏–π")
    
    max_count = min(collection.get('max_count', 10), len(events))
    events = events[:max_count]
    
    if not events:
        print("‚ùå –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å")
        return
    
    # –§–û–†–ú–ò–†–£–ï–ú –°–û–û–ë–©–ï–ù–ò–ï
    msg = f"‚ú® <b>{collection['name']}</b> ‚ú®\n"
    msg += f"üìç {territory['name']}\n"
    msg += f"üìä {len(events)} —Å–æ–±—ã—Ç–∏–π\n"
    msg += "=" * 50 + "\n\n"
    
    for i, e in enumerate(events, 1):
        title = e.get('title', '–°–æ–±—ã—Ç–∏–µ')[:70]
        date = e.get('date', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
        time = e.get('time', '')
        place = e.get('place', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')[:50]
        price = e.get('price', '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ')
        url = e.get('url', '')
        source = e.get('source', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        quality = e.get('quality', '?')
        
        msg += f"<b>{i}. {title}</b>\n"
        msg += f"‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: {quality}/10\n"
        msg += f"üìÖ {date}"
        if time:
            msg += f" –≤ {time}"
        msg += "\n"
        msg += f"üìç {place}\n"
        msg += f"üí∞ {price}\n"
        msg += f"üìå –ò—Å—Ç–æ—á–Ω–∏–∫: {source}\n"
        
        if url:
            msg += f"üîó <a href='{url}'>–°—Å—ã–ª–∫–∞</a>"
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã —Å—Å—ã–ª–∫—É
            yandex_url = f"https://yandex.ru/maps/?text={place.replace(' ', '+')}"
            msg += f" | <a href='{yandex_url}'>–ù–∞ –∫–∞—Ä—Ç–µ</a>\n"
        else:
            msg += "\n"
        
        msg += "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã —Å—Å—ã–ª–∫—É
    locations = [e.get('place', '') for e in events if e.get('place')]
    if locations:
        msg += "=" * 50 + "\n"
        msg += "üìç <b>–í—Å–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ:</b>\n"
        map_url = "https://yandex.ru/maps/?text=" + "%2C".join([l.replace(' ', '+')[:30] for l in locations[:5]])
        msg += f"<a href='{map_url}'>–û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö</a>\n"
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        url_api = f"https://api.telegram.org/bot{token}/sendMessage"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è (–ª–∏–º–∏—Ç Telegram = 4096 —Å–∏–º–≤–æ–ª–æ–≤)
        if len(msg) > 4000:
            print(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ({len(msg)} —Å–∏–º–≤–æ–ª–æ–≤)")
            print("üì¶ –†–∞–∑–±–∏–≤–∞—é –Ω–∞ —á–∞—Å—Ç–∏...")
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 3500 —Å–∏–º–≤–æ–ª–æ–≤
            msg_parts = [msg[i:i+3500] for i in range(0, len(msg), 3500)]
            
            for part_num, part in enumerate(msg_parts, 1):
                data = {
                    "chat_id": int(group_id),
                    "text": part,
                    "message_thread_id": territory['thread_id'],
                    "parse_mode": "HTML",
                    "disable_web_page_preview": False
                }
                response = requests.post(url_api, json=data, timeout=10)
                if response.status_code != 200:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —á–∞—Å—Ç–∏ {part_num}: {response.text}")
                    return
            
            print(f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π –≤ {len(msg_parts)} —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!")
        else:
            # –°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–∏–º –∫—É—Å–∫–æ–º
            data = {
                "chat_id": int(group_id),
                "text": msg,
                "message_thread_id": territory['thread_id'],
                "parse_mode": "HTML",
                "disable_web_page_preview": False
            }
            response = requests.post(url_api, json=data, timeout=10)
            
            if response.status_code == 200:
                print(f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π!")
                print(f"üì± –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {response.text}")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()